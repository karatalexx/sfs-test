// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Post {
  id               String           @id @default(cuid())
  createdAt        DateTime         @default(now())
  authorId         String
  title            String           @db.VarChar(255)
  content          String           @db.VarChar(255)
  upVotes          PostUpVote[]
  downVotes        PostDownVote[]
  comments         PostComment[]
  commentsComments CommentComment[]

  @@index([authorId])
}

model PostUpVote {
  id     String @id @default(cuid())
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@unique([postId, userId])
  @@index([postId])
}

model PostDownVote {
  id     String @id @default(cuid())
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@unique([postId, userId])
  @@index([postId])
}

model PostComment {
  id        String            @id @default(cuid())
  userId    String
  post      Post              @relation(fields: [postId], references: [id])
  postId    String
  content   String
  createdAt DateTime          @default(now())
  upVotes   CommentUpVote[]
  downVotes CommentDownVote[]

  @@index([postId])
}

model CommentComment {
  id        String            @id @default(cuid())
  userId    String
  commentId String
  content   String
  post      Post              @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime          @default(now())
  upVotes   CommentUpVote[]
  downVotes CommentDownVote[]

  @@index([commentId])
  @@index([postId])
}

model CommentUpVote {
  id               String          @id @default(cuid())
  userId           String
  commentComment   CommentComment? @relation(fields: [commentCommentId], references: [id])
  commentCommentId String?
  postComment      PostComment?    @relation(fields: [postCommentId], references: [id])
  postCommentId    String?

  @@index([commentCommentId])
  @@index([postCommentId])
}

model CommentDownVote {
  id               String          @id @default(cuid())
  userId           String
  commentComment   CommentComment? @relation(fields: [commentCommentId], references: [id])
  commentCommentId String?
  postComment      PostComment?    @relation(fields: [postCommentId], references: [id])
  postCommentId    String?

  @@index([commentCommentId])
  @@index([postCommentId])
}
